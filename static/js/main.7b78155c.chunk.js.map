{"version":3,"sources":["pentagon.js","App.js","serviceWorker.js","index.js"],"names":["w_factor","Math","sqrt","l_factor","r_factor","Pentagon","args","length","this","center","radius","startAngle","level","cx","cy","new_level","results","new_radius","offsets","angles","i","angle","PI","push","cos","sin","props","path_data","c","s","toFixed","transform","fill","fillStyle","stroke","strokeColor","stroke-width","strokeWidth","d","App","state","keepPrev","tileProps","oldTiles","leafStart","newTiles","tiles","subdivide","j","e","newDepth","target","value","setState","prevState","subdivide_tiles","box","class","xmlns","width","height","viewBox","tabIndex","map","pent","makeComponent","placeTiles","type","min","max","onInput","oninput","bind","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7b78155c.chunk.js","sourcesContent":["import React from 'react';\n\nconst w_factor = Math.sqrt( (5 + Math.sqrt(5)) / 2 );\nconst s_factor = Math.sqrt( (5 - Math.sqrt(5)) / 2 );\nconst h_factor = w_factor / Math.sqrt(2 - (2 / Math.sqrt(5)));\nconst l_factor = h_factor - 1;\nconst r_factor = 1 / (1 + 2*l_factor);\n\nconst add_insets = false; // Adds the pentagons that squeeze into the diamonds. Still needs some work\n\nconst colors = [\n    \"#004d00\",\n    \"#008000\",\n    \"#00b300\",\n    \"#00ff00\",\n    \"#99ff99\",\n    \"#ffffff\",\n];\n\nexport class Pentagon {\n    constructor(...args) {\n        if (args.length == 1 && args[0] instanceof Pentagon) {\n            this.center = [args[0].center[0], args[0].center[1]];\n            this.radius = args[0].radius;\n            this.startAngle = args[0].startAngle;\n            this.level = args[0].level;\n        } else if (args.length == 5) {\n            this.center = [args[0], args[1]];\n            this.radius = args[2];\n            this.startAngle = args[3];\n            this.level = args[4];\n        }\n    }\n\n    subdivide() {\n        if (this.level >= 5) {\n            return [];\n        }\n\n        const cx = this.center[0];\n        const cy = this.center[1];\n        const new_level = this.level + 1;\n\n        // console.log('W = ' + w_factor);\n        // console.log('S = ' + s_factor);\n        // console.log('H = ' + h_factor);\n        // console.log('L = ' + l_factor);\n        // console.log('R = ' + r_factor);\n\n        let results = [];\n        {\n            const new_radius = this.radius * r_factor;\n            let offsets = [];\n            let angles = [];\n            for (let i=0; i<5; i++) {\n                const angle = this.startAngle + i * 2 * Math.PI / 5;\n                offsets.push([2*l_factor*new_radius*Math.cos(angle),\n                              2*l_factor*new_radius*Math.sin(angle)]);\n                angles.push(angle);\n            }\n            // center\n            results.push(new Pentagon(cx, cy, new_radius, this.startAngle+Math.PI, new_level));\n\n            // five around\n            results.push(new Pentagon(cx + offsets[0][0], cy + offsets[0][1], new_radius, angles[0], new_level));\n            results.push(new Pentagon(cx + offsets[1][0], cy + offsets[1][1], new_radius, angles[1], new_level));\n            results.push(new Pentagon(cx + offsets[2][0], cy + offsets[2][1], new_radius, angles[2], new_level));\n            results.push(new Pentagon(cx + offsets[3][0], cy + offsets[3][1], new_radius, angles[3], new_level));\n            results.push(new Pentagon(cx + offsets[4][0], cy + offsets[4][1], new_radius, angles[4], new_level));\n        }\n        if (add_insets) {\n            let offsets = [];\n            let angles = [];\n\n            const factor1 = 0.767;\n            const factor2 = 0.144;\n\n            for (let i=0; i<5; i++) {\n                const angle = this.startAngle + i * 2 * Math.PI / 5 + Math.PI;\n                offsets.push([factor1*this.radius*Math.cos(angle),\n                              factor1*this.radius*Math.sin(angle)]);\n                angles.push(angle);\n            }\n\n            // five insets\n            results.push(new Pentagon(cx + offsets[0][0], cy + offsets[0][1], this.radius * factor2, angles[0], new_level));\n            results.push(new Pentagon(cx + offsets[1][0], cy + offsets[1][1], this.radius * factor2, angles[1], new_level));\n            results.push(new Pentagon(cx + offsets[2][0], cy + offsets[2][1], this.radius * factor2, angles[2], new_level));\n            results.push(new Pentagon(cx + offsets[3][0], cy + offsets[3][1], this.radius * factor2, angles[3], new_level));\n            results.push(new Pentagon(cx + offsets[4][0], cy + offsets[4][1], this.radius * factor2, angles[4], new_level));\n        }\n        return results;\n    }\n\n    makeComponent(props) {\n        const xfm = \"translate(0,0)\";\n        let path_data = '';\n        for (let i=0; i<5; i++) {\n            if (i == 0) {\n                path_data += 'M ';\n            } else {\n                path_data += 'L ';\n            }\n            const angle = 2 * i * Math.PI / 5 + this.startAngle;\n            const c = Math.cos(angle);\n            const s = Math.sin(angle);\n            path_data += (this.center[0] + this.radius * c).toFixed(2) + ' ' + (this.center[1] + this.radius * s).toFixed(2) + ' ';\n        }\n        path_data += 'Z';\n        const color = colors[this.level%colors.length];\n        return <g transform={xfm}>\n                   <path fill={props.fillStyle}\n                         stroke={props.strokeColor}\n                         stroke-width={props.strokeWidth}\n                         d={path_data} />\n            </g>\n    }\n}\n\nexport default Pentagon;\n","import React from 'react';\nimport './App.css';\nimport {Pentagon} from './pentagon.js';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            level: 0\n        };\n\n        this.keepPrev = false;\n\n        this.tileProps = {\n            fillStyle: \"#0066ff\",\n            strokeColor: \"#0047b3\",\n            strokeWidth: \"1\"\n        };\n    }\n\n    subdivide_tiles(oldTiles, leafStart, keepPrev) {\n        let newTiles = [];\n        if (keepPrev) {\n            for (let i=0; i<oldTiles.length; i++) {\n                newTiles.push(oldTiles[i]);\n            }\n        }\n        for (let i=leafStart; i<oldTiles.length; i++) {\n            const tiles = oldTiles[i].subdivide();\n            for (let j=0; j<tiles.length; j++) {\n                newTiles.push(tiles[j]);\n            }\n        }\n        return newTiles;\n    }\n\n    oninput(e) {\n        const newDepth = e.target.value;\n        this.setState((prevState) => {\n            return {level: newDepth}\n        });\n    }\n\n    render() {\n        let tiles = [ new Pentagon(0, 25, 320,-Math.PI/2, 0) ];\n        for (let i=0; i<this.state.level; i++) {\n            tiles = this.subdivide_tiles(tiles, 0, this.keepPrev);\n        }\n\n        const placeTiles = (tiles) => tiles.map((pent) => {\n            return pent.makeComponent(this.tileProps);\n        });\n\n        const w = 800;\n        const h = 600;\n        const box = [-w/2, -h/2, w, h];\n        return (\n            <div class=\"wrapper\">\n                <h2>Recursive Pentagons</h2>\n                <svg xmlns=\"http://www.w3.org/2000/svg\"\n                     width={w}\n                     height={h}\n                     viewBox={box}\n                     tabIndex=\"1\"\n                >\n                    <>\n                        { placeTiles(tiles) }\n                    </>\n                </svg>\n                <div>\n                    <span>\n                        <input type=\"range\" class=\"slider\"\n                               min=\"0\" max=\"5\"\n                               value={this.state.level}\n                               onInput={this.oninput.bind(this)} />\n                        <div>Level = {this.state.level}</div>\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}